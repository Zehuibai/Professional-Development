color = "#2a475e"
),
# Statistical annotations below the main title
plot.subtitle = element_text(
family = "Roboto",
size = 15,
face = "bold",
color="#1b2838"
),
plot.title.position = "plot", # slightly different from default
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12)
)
plt +
# Add labels and title
labs(
x = "Penguins Species",
y = "Bill Length",
title = "Distribution of bill length across penguins species"
) +
# Customizations
theme(
# This is the new default font in the plot
text = element_text(family = "Roboto", size = 8, color = "black"),
plot.title = element_text(
family = "Lobster Two",
size = 20,
face = "bold",
color = "#2a475e"
),
# Statistical annotations below the main title
plot.subtitle = element_text(
family = "Roboto",
size = 15,
face = "bold",
color="#1b2838"
),
plot.title.position = "plot", # slightly different from default
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12),
axis.ticks = element_blank(),
axis.line = element_line(colour = "grey50"),
panel.grid = element_line(color = "#b4aea9"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(linetype = "dashed"),
panel.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
plot.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4")
)
#create forest plot
ggplot(data=df, aes(y=index, x=effect, xmin=lower, xmax=upper)) +
geom_point() +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(df), labels=df$study) +
labs(title='Effect Size by Study', x='Effect Size', y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_minimal()
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper)) +
geom_point() +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(df), labels=df$study) +
labs(title='Effect Size by Study', x='Effect Size', y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_minimal()
Forest.df <- data.frame(study=c('S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7'),
index=1:7,
effect=c(-.4, -.25, -.1, .1, .15, .2, .3),
lower=c(-.43, -.29, -.17, -.02, .04, .17, .27),
upper=c(-.37, -.21, -.03, .22, .24, .23, .33))
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper)) +
geom_point() +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(df), labels=df$study) +
labs(title='Effect Size by Study', x='Effect Size', y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_minimal()
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper))
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper)) +
geom_point() +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=study) +
labs(title='Effect Size by Study', x='Effect Size', y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_minimal()
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper)) +
geom_point() +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=$Forest.dfstudy) +
labs(title='Effect Size by Study', x='Effect Size', y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_minimal()
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper)) +
geom_point() +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=Forest.df$study) +
labs(title='Effect Size by Study', x='Effect Size', y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_minimal()
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper)) +
geom_point() +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=Forest.df$study) +
labs(title='Effect Size by Study', x='Effect Size', y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_classic()
?geom_text
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper,label=as.character(effect))) +
geom_label() +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=Forest.df$study) +
labs(title='Effect Size by Study',
x='Effect Size',
y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_classic()
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper,
label=as.character(effect))) +
geom_label(vjust=0.5) +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=Forest.df$study) +
labs(title='Effect Size by Study',
x='Effect Size',
y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_classic()
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper,
label=as.character(effect))) +
geom_label(vjust=-5.5) +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=Forest.df$study) +
labs(title='Effect Size by Study',
x='Effect Size',
y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_classic()
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper,
label=as.character(effect))) +
geom_label(vjust=-1.5) +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=Forest.df$study) +
labs(title='Effect Size by Study',
x='Effect Size',
y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_classic()
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper,
label=as.character(effect))) +
geom_label(vjust=-0.5) +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=Forest.df$study) +
labs(title='Effect Size by Study',
x='Effect Size',
y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_classic()
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper,
label=as.character(effect))) +
geom_label(vjust=-0.2) +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=Forest.df$study) +
labs(title='Effect Size by Study',
x='Effect Size',
y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_classic()
## create forest plot
ggplot(data=Forest.df,
aes(y=index, x=effect, xmin=lower, xmax=upper,
label=as.character(effect))) +
geom_label(vjust=-0.1) +
geom_errorbarh(height=.1) +
scale_y_continuous(breaks=1:nrow(Forest.df), labels=Forest.df$study) +
labs(title='Effect Size by Study',
x='Effect Size',
y = 'Study') +
geom_vline(xintercept=0, color='black', linetype='dashed', alpha=.5) +
theme_classic()
library("meta")
data(Fleiss93)
head(Fleiss93)
metaresult<-metabin(event.e, n.e,data=Fleiss93,sm="RR",
studlab=paste(study, year),comb.random=FALSE)
metaresult<-metabin(event.e, n.e,event.c,n.c,data=Fleiss93,sm="RR",
studlab=paste(study, year),comb.random=FALSE)
metaresult<-metabin(event.e, n.e,event.c,n.c,data=Fleiss93,sm="RR",
studlab=paste(study, year),random=FALSE)
forest(metaresult)
?forest
489/698
26/698
183/698
?wilcox.test
83*30
105+42
147/141
data(heights)
install.packages("dslabs")
data(dslabs::heights)
library(dslabs)
data(heights)
class(heights)
class(heights$sex)
class(heights$height)
class(75.00000)
class(75.00000)
nrow(dslabs)
nrow(heights)
heights[777,]
heights$sex[777]
heights[777,1]
summary(heights$height)
which(min(heights$height))
which(heights$height==min(heights$height))
heights[1032 ,]
heights[1045 ,]
table(heights$sex)
prop.table(heights$sex)
prop(heights$sex)
prop.table(heights$sex)
prop.table(heights)
prop.table(table(heights$sex))
library(tidyverse)
heights %>% filter(heights > 78) %>% nrow()
heights %>% filter(height gt 78) %>% nrow()
heights %>% filter(height > 78) %>% nrow()
heights %>% filter(height > 78 & sex == "Female") %>% nrow()
a<-c(3,0, TRUE )
b<-c(4,0, FALSE )
c<-(a | b)
c
112*2*0.07
224*.05
224*01
224*0.1
224*0.1
224*0.025
224*0.04
224*0.02
6/0.075
2/0.075
library(car)      # package to calculate Variance Inflation Factor
library(corrplot) # correlation plots
library(leaps)    # best subsets regression
library(glmnet)   # allows ridge regression, LASSO and elastic net
library(caret)    # this will help identify the appropriate parameters
library(car)      # package to calculate Variance Inflation Factor
library(corrplot) # correlation plots
library(leaps)    # best subsets regression
library(glmnet)   # allows ridge regression, LASSO and elastic net
library(caret)    # this will help identify the appropriate parameters
prostate <- read.delim("./01_Datasets/prostate.txt", header=T)
## 统计图或表格来理解数据
## 可以看出，结果变 量lpsa和预测变量lcavol之间确实存在明显的线性关系
plot(prostate)
## 专门为特征Gleason建立一个统计图
plot(prostate$gleason, ylab = "Gleason Score")
table(prostate$gleason)
## 解决方法
#  完全删除这个特征;
#  仅删除值为8.0和9.0的那些评分;
#  对特征重新编码，建立一个指标变量。
#  建立一个横轴为Gleason Score，纵轴为Log of PSA的箱线图，会对我们的选择有所帮助
#  最好的选择是，将这个特征转换为一个指标变量，0表示评分为6，1表示评分为7或更高。删除特征可能会损失模型的预测能力。缺失值也可能会在我们将要使用的 glmnet包中引起问题。
boxplot(prostate$lpsa ~ prostate$gleason, xlab = "Gleason Score",
ylab = "Log of PSA")
## 对指标变量的编码使用ifelse()命令
prostate$gleason <- ifelse(prostate$gleason == 6, 0, 1)
table(prostate$gleason)
## 相关性统计图，表示特征之间是否存在相关性或依赖
## 发现问题：PSA和肿瘤体积的对数(lcavol)高度相关 0.73, 多重共线: 肿瘤体积还与包膜穿透相关，而包膜穿透还与贮精囊侵入相关
p.cor = cor(prostate[,-1])
corrplot.mixed(p.cor)
## 开始机器学习之前，必须先建立训练数据集和测试数据集
## 观测值中已经有一个特征指 明这个观测值是否属于训练集，我们就可以使用subset()命令将train值为TRUE的观测值分到 训练集中，将train值为FALSE的观测值分到测试集
train <- subset(prostate, train == TRUE)[, 2:10]
str(train)
test = subset(prostate, train==FALSE)[,2:10]
str(test)
## 通过regsubsets()命令建立一个最小子集对象
subfit <- regsubsets(lpsa ~ ., data = train)
b.sum <- summary(subfit)
## 使用贝叶斯信息准则，三特征模型具有最小的BIC值
which.min(b.sum$bic)
## 通过一个统计图查看模型性能和子集组合之间的关系
plot(b.sum$bic, type = "l", xlab = "# of Features", ylab = "BIC",
main = "BIC score by Feature Inclusion")
## 对实际模型做出统计图，进行更详细的检查，上图告诉我们具有最小BIC值的模型中的3个特征是:lcavol、lweight和gleason
plot(subfit, scale = "bic", main = "Best Subset Features")
## 用以上3个变量建立一个线性模型
ols <- lm(lpsa ~ lcavol + lweight + gleason, data = train)
## 线性拟合表现得很好，也不存在异方差性
plot(ols$fitted.values, train$lpsa, xlab = "Predicted", ylab = "Actual",
main = "Predicted vs Actual")
## 模型在测试集上的表现
pred.subfit = predict(ols, newdata=test)
plot(pred.subfit, test$lpsa , xlab = "Predicted",
ylab = "Actual", main = "Predicted vs Actual")
## 计算均方误差MSE，以便在不同模型构建技术之间进行比较
resid.subfit = test$lpsa - pred.subfit
mean(resid.subfit^2)
grid <- expand.grid(.alpha = seq(0,1, by=.2),
.lambda = seq(0.00, 0.2, by = 0.02))
table(grid)
head(grid)
## 对于定量型响应变量，使用算法的默认选择均方根误差即可完美实现
control <- trainControl(method = "LOOCV") # selectionFunction="best"
set.seed(701)                             # our random seed
enet.train = train(lpsa ~ ., data = train,
method = "glmnet",
trControl = control,
tuneGrid = grid)
enet.train
## 在测试集上验证模型
enet <- glmnet(x, y,family = "gaussian",
alpha = 0,
lambda = .08)
x <- as.matrix(train[, 1:8])
y <- train[, 9]
enet <- glmnet(x, y,family = "gaussian",
alpha = 0,
lambda = .08)
enet.coef <- coef(enet, s = .08, exact = TRUE)
library("papeR")
data(Orthodont, package = "nlme")
labels(Orthodont) <- c("fissure distance (mm)",
"age (years)", "Subject", "Sex")
summarize(Orthodont, type = "numeric", group = "Sex",
test = c("wilcox.test", "t.test"))
2/0.075
2/0.15
.15*2
1/0.3
2/0.15
1/0.075
1/0.15
1/2/0.015
1/2/0.15
1/2/0.075
1/6/0.12
1/6/0.06
library(languageR)
data(dative)
summary(dative)
library(tidyverse)
library(ggmosaic)
spdative.xtabs <- xtabs(~ RealizationOfRecipient + AnimacyOfRec + AnimacyOfTheme,data =dative)
spdative.xtabs
mosaicplot(spdative.xtabs, color=T)
require(foreign)
require(MASS)
cdata <- read.dta("https://stats.idre.ucla.edu/stat/data/crime.dta")
summary(cdata)
### OLS regression
summary(ols <- lm(crime ~ poverty + single, data = cdata))
plot(ols, las = 1)
### looking at diagnostic plots
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(ols, las = 1)
par(opar)
d1 <- cooks.distance(ols)
r <- stdres(ols)
a <- cbind(cdata, d1, r)
a[d1 > 4/51, ]
### command for running robust regression is rlm in the MASS package
summary(rr.huber <- rlm(crime ~ poverty + single, data = cdata))
361/389
211/389
48+26+13+5
305/389
347&389
347/389
165/389
388/389
101/389
qt(.95,6-1)*(0.14)/sqrt(6)
-0.66-0.1151696
238/389
32/238
193+15
15
4.3+14.4+26
(4.443-3.240 )/3.240
387/389
90/239
106/239
41/239
226/239
109*0.85
23/239
62/323
98/323
192/323
44/323
205/323
20/238
34/239
20/239
194/323
139/323
129/323
4+36+60+10
13/(257+25)
283+57
283+183
88+57
145/311
32+88+57+34
211/311
24+6
30/311
(88+57)/303
(32+88+57+34)/303
23/303
44+82+60+42
228/310
43+82+60+39
224/303
13/322
136/(136+183)
323-285
42+43+41+34
160/239
52/239
(4.455 -3.168 )/3.168
173/322
628+616
38/1244
23+45+44+65+4826
23+45+44+65+48+26
251/323
387/388
101/3858
101/388
3+7+4+15+35+14+15+65+32+49+15+6
119+10+35
9/16
30*365.25/(1102+1078+1093)
30*365.25/(1102+1078+1093)
50*365.25/(1102+1078+1093)
-0.266666667+0.35+1.25-1.2+1.8+1.35+2.65-0.2+4.25+1.55+17.2-3.9+0.7+2.1+6.65+1.6
35.88333/16
130/23.50445
530/24
50/8.96
-log(50/20)
-ln(50/20)
-log(20/50)
-log(20/80)
-log(20/63)
600*0.037
packages<-c("tidyverse", "knitr", "papeR", "clinUtils", "kableExtra")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
install.packages("rlang")
packages<-c("tidyverse", "knitr", "papeR", "clinUtils", "kableExtra")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
## ADaM Datasets
data(dataADaMCDISCP01)
ADSL <- dataADaMCDISCP01$ADSL
getClinDT(ADSL)
ADSL %>%
filter(USUBJID=="01-701-1148") %>%
kable(caption = "Subject Level Analysis Dataset", format = "html") %>%
kable_styling(latex_options = "striped")
getClinDT(ADSL)
ADVS <- dataADaMCDISCP01$ADVS
getClinDT(ADVS %>% filter(USUBJID=="01-701-1148"))
# ADSL %>%
#   filter(USUBJID=="01-701-1148") %>%
#   kable(caption = "Subject Level Analysis Dataset", format = "html") %>%
#   kable_styling(latex_options = "striped")
ADLBC <- dataADaMCDISCP01$ADLBC
getClinDT(ADLBC %>% filter(USUBJID=="01-701-1148"))
shiny::runApp('GitHub/Professional-Qualification/IBM-Data Analytics with Excel and R Professional Certificate/Data Visualization with R')
runApp('GitHub/Professional-Qualification/IBM-Data Analytics with Excel and R Professional Certificate/Data Visualization with R')
shiny::runApp()
