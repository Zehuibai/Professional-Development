library(shiny); runApp('01. Simple Shiny App.R')
library(shiny)
library(tidyverse)
library(plotly)
library(DT)
#####Import Data
dat<-read_csv(url("https://www.dropbox.com/s/uhfstf6g36ghxwp/cces_sample_coursera.csv?raw=1"))
dat<- dat %>% select(c("pid7","ideo5","newsint","gender","educ","CC18_308a","region"))
dat<-drop_na(dat)
#####Make your app
ui <- navbarPage(
title="My Application",
tabPanel("Page 1",
sidebarLayout(
sidebarPanel(
sliderInput("my_ideo5",
"Select Five Point Ideology (1=Very liberal, 5=Very conservative)",
min=1,
max=5,
value=3)
),
mainPanel(
tabsetPanel(
tabPanel("Tab1", plotOutput("plot1")),
tabPanel("Tab2", plotOutput("plot2"))
)
)
)
),
tabPanel("Page 2",
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId="my_gender",
label="Select Gender",
choices=c("1","2"),
selected="1")
),
mainPanel(
plotlyOutput("plot3")
)
)
),
tabPanel("Page 3",
sidebarLayout(
sidebarPanel(
selectInput(inputId="my_region",
label="Select Region",
choices=c("1","2","3","4"),
multiple=TRUE)
),
mainPanel(
dataTableOutput(outputId = "table1")
)
)
)
)
server<-function(input,output){
output$plot1 <- renderPlot({
ggplot(
filter(dat,ideo5==input$my_ideo5),
aes(x=pid7)) +
geom_bar() +
xlab("7 Point Party ID, 1=Very D, 7=Very R") +
ylab("Count") +
scale_x_continuous(limits=c(0,8)) +
scale_y_continuous(limits=c(0,100))
})
output$plot2 <- renderPlot({
ggplot(
filter(dat,ideo5==input$my_ideo5),
aes(x=CC18_308a)) +
geom_bar() +
xlab("Trump Support") +
ylab("count") +
scale_x_continuous(limits=c(0,5))
})
output$plot3 <- renderPlotly({
print(ggplotly(
ggplot(
filter(dat,gender==input$my_gender),
aes(x=educ,y=pid7)) +
geom_jitter() +
geom_smooth(method=lm)))
})
output$table1 <- renderDataTable({
filter(dat,region %in% input$my_region)})
}
shinyApp(ui,server)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())   # Remove all objects
cat("\014")       # Clear console (RStudio)
# <!-- ---------------------------------------------------------------------- -->
# <!--                    1. load the required packages                       -->
# <!-- ---------------------------------------------------------------------- -->
## if(!require(psych)){install.packages("psych")}
packages<-c("tidyverse", "kableExtra",
"gtsummary","inTextSummaryTable",
"Hmisc","htmltools","clinUtils","binom","MKinfer",
"epiR","readxl","writexl", "pROC", "rsample",
"MRMCaov")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
# <!-- ---------------------------------------------------------------------- -->
# <!--                        2. Basic system settings                        -->
# <!-- ---------------------------------------------------------------------- -->
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
Sys.setlocale("LC_ALL","English")
## Load all r functions
## The directory where all source code files are saved.
source_code_dir <- "../00_Function/"
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){source(f_path)}
IOU <- 0.5
pfad <- "./Data/2025.07.20 RCT"
Filename_Image_with_Crown <- "Found_Crown_V1.csv"
Filename_Image_with_RCT <- "Found_RCT_V2.csv"
Filename_Image_with_Rest <- "Found_Rest_V1.csv"
Filename_Image_without_Crown <- "Not-Found_Crown_V1.csv"
Filename_Image_without_RCT <- "Not-Found_RCT_V1.csv"
Filename_Image_without_Rest <- "Not_Found_Rest_v1.xlsx"
Pathological_Finding <- "Restoration"
# <!-- ---------------------------------------------------------------------- -->
# <!--                  3a.    Load Image Datasets                            -->
# <!-- ---------------------------------------------------------------------- -->
## Image with and without Lesion
Image_with_lesion_D01 <- read_csv(file.path(pfad,Filename_Image_with_RCT)) %>% mutate(Subgroup_Restoration = "RCT") %>%
filter(Image_Name != "") %>%
rename(
Total_GT = `Total GT`,
Total_Pred = `Total Pred`,
GT_Pred_Matched = `Total Matched`,
True_Negative = `True Negative`
) %>%
mutate(Lesion = "Yes",
Total_Surface = True_Negative+Total_GT+Total_Pred-GT_Pred_Matched) %>%
dplyr::select(Image_Name,Lesion,Total_GT,Total_Pred,GT_Pred_Matched,Total_Surface,True_Negative,Subgroup_Restoration)
Image_without_lesion_D01 <- read_csv(file.path(pfad,Filename_Image_without_RCT)) %>% mutate(Subgroup_Restoration = "RCT") %>%
filter(Image_Name != "") %>%
rename(
Total_GT = `Total GT`,
Total_Pred = `Total Pred`,
GT_Pred_Matched = `Total Matched`,
True_Negative = `True Negative`
)%>%
mutate(Lesion = "No",
Total_Surface = True_Negative+Total_GT+Total_Pred-GT_Pred_Matched) %>%
dplyr::select(Image_Name,Lesion,Total_GT,Total_Pred,GT_Pred_Matched,Total_Surface,True_Negative,Subgroup_Restoration)
Image_D01 <- rbind(Image_with_lesion_D01, Image_without_lesion_D01) %>%
mutate(
Pathological = Pathological_Finding,
## Format the Image ID
Image_Name = toupper(Image_Name),
Image_Name = sub(".TXT", "", Image_Name),
Image_Name = sub("_BMP", ".BMP", Image_Name),
Image_Name = sub("_PNG", ".PNG", Image_Name),
Image_Name = sub("_JPEG", ".JPEG", Image_Name),
Image_Name = sub("_JPG", ".JPG", Image_Name)
) %>%
filter(Total_Surface != 0)
# <!-- ---------------------------------------------------------------------- -->
# <!--                  3b.    Load Master Datasets                           -->
# <!-- ---------------------------------------------------------------------- -->
Master_D01 <- read_csv(("./Data/Master/Rest_Crown_RCT_Master_Sheet_Part1.csv")) %>%
rename(Image_Type = Classification,
Sensor = Sensor_Name) %>%
mutate(
Image_Name = toupper(Image_Name),
Image_Name = sub(".TXT", "", Image_Name),
Image_Name = sub(".BMP", "", Image_Name),
Image_Name = sub(".PNG", "", Image_Name),
Image_Name = sub(".JPEG", "", Image_Name),
Image_Name = sub(".JPG", "", Image_Name),
Image_Type = as.factor(Image_Type),
Sensor = as.factor(Sensor))
Master_D02 <- Master_D01 %>%
inner_join(Image_D01 %>%
dplyr::select(Image_Name,Lesion,Subgroup_Restoration), by = "Image_Name") %>%
mutate(Patient_ID = Image_Name,
USUBJID=Image_Name,
# Age_Group = case_when(
#    Age >= 18 & Age <= 40 ~ "18-40 years",
#    Age >= 41 & Age <= 60 ~ "41-60 years",
#    Age > 60 ~ ">60 years",
#    TRUE ~ NA_character_ ),
# Gender = case_when(
#   toupper(Gender) %in% c("MALE") ~ "Male",
#   TRUE ~ Gender  # Keeps original value if not "male" or "MALE"
# ),
Age_Group = case_when(
Age == "15-40" ~ "18-40 years",
Age == "40-60" ~ "41-60 years",
Age == "60+" ~ ">60 years",
TRUE ~ NA_character_ ),
Age_Group = factor(Age_Group, levels = c("18-40 years", "41-60 years", ">60 years")),
Gender = case_when(
toupper(Gender) %in% c("M") ~ "Male",
toupper(Gender) %in% c("F") ~ "Female"
),
Image = Image_Name,
DUMMY = "n/(%)",
Lesion = factor(Lesion, levels = c("Yes","No")))
# write_xlsx(Master_D02, "./01_Datasets/Output Data/Master_2024.12.24.xlsx")
# <!-- ------------------------------------ -->
# <!--               Check                  -->
# <!-- ------------------------------------ -->
## Check Image Level Data: whether Total Surface is 0
Image_D01 %>%
filter(Total_Surface==0)
## Check Total Image Number
length(Image_D01$Image_Name)
table(Image_D01$Lesion)
## Check Total Lesion Number
sum_lesion <- sum(Image_D01$Total_GT[Image_D01$Lesion == "Yes"])
sum_lesion
## Check the average by dividing by the number of filtered rows
average_lesion <- sum_lesion / sum(Image_D01$Lesion == "Yes")
average_lesion
## Check Total Surface Number
sum(Image_D01$Total_Surface)
## Check Overall Results
Image_D02 <- Image_D01 %>%
full_join(Master_D02) %>%
mutate(
Ture_Positive=GT_Pred_Matched,
False_Positive=Total_Pred-GT_Pred_Matched,
False_Nagative=Total_GT-GT_Pred_Matched,
Total_Surface_Check = Ture_Positive + True_Negative + False_Positive + False_Nagative,
Image_conservative=case_when(
Lesion == "Yes" & GT_Pred_Matched > 0 ~ "TP",
Lesion == "Yes" & GT_Pred_Matched == 0 ~ "FN",
Lesion == "No" & Total_Pred > 0 ~ "FP",
Lesion == "No" & Total_Pred == 0 ~ "TN"
),
Image_strict=case_when(
Lesion == "Yes" & GT_Pred_Matched == Total_GT ~ "TP",
Lesion == "Yes" & GT_Pred_Matched != Total_GT ~ "FN",
Lesion == "No" & Total_Pred > 0 ~ "FP",
Lesion == "No" & Total_Pred == 0 ~ "TN"
)
)
Image_D02 %>% filter(Total_Surface_Check!=Total_Surface)
## Surface Overall Results
check_surface_TP <- sum(Image_D02$Ture_Positive)
check_surface_TN <- sum(Image_D02$True_Negative)
check_surface_FP <- sum(Image_D02$False_Positive)
check_surface_FN <- sum(Image_D02$False_Nagative)
cross_table_surface <- c(check_surface_TP,check_surface_FP,
check_surface_FN,check_surface_TN)
epi.tests(cross_table_surface, method = "exact", digits = 3, conf.level = 0.95)
## Image Strict Overall Results
check_image_strict_TP <- length(Image_D02$Image_strict[Image_D02$Image_strict == "TP"])
check_image_strict_TN <- length(Image_D02$Image_strict[Image_D02$Image_strict == "TN"])
check_image_strict_FP <- length(Image_D02$Image_strict[Image_D02$Image_strict == "FP"])
check_image_strict_FN <- length(Image_D02$Image_strict[Image_D02$Image_strict == "FN"])
cross_table_image_strict <- c(check_image_strict_TP,check_image_strict_FP,
check_image_strict_FN,check_image_strict_TN)
epi.tests(cross_table_image_strict, method = "exact", digits = 3, conf.level = 0.95)
## Image Conservative Overall Results
check_image_conservative_TP <- length(Image_D02$Image_conservative[Image_D02$Image_conservative == "TP"])
check_image_conservative_TN <- length(Image_D02$Image_conservative[Image_D02$Image_conservative == "TN"])
check_image_conservative_FP <- length(Image_D02$Image_conservative[Image_D02$Image_conservative == "FP"])
check_image_conservative_FN <- length(Image_D02$Image_conservative[Image_D02$Image_conservative == "FN"])
cross_table_image_conservative <- c(check_image_conservative_TP,check_image_conservative_FP,
check_image_conservative_FN,check_image_conservative_TN)
epi.tests(cross_table_image_conservative, method = "exact", digits = 3, conf.level = 0.95)
# Image_D02_surface_TN <- Image_D02 %>%
#   filter(True_Negative<0)
# write_xlsx(Image_D02_surface_TN,"./Check/2025.05.14_Calculus_Phase_1_Data_05.13/check_surface_TN.xlsx")
#
# Image_D02_surface_FP <- Image_D02 %>%
#   filter(False_Positive>0 & True_Negative>0)
# write_xlsx(Image_D02_surface_FP,"./Check/2025.05.14_Calculus_Phase_1_Data_05.13/check_surface_FP.xlsx")
#
# Image_D02_image_strict_FN <- Image_D02 %>%
#   filter(Image_strict == "FN")
# write_xlsx(Image_D02_image_strict_FN,"./Check/2025.05.14_Calculus_Phase_1_Data_05.13/check_image_strict_FN.xlsx")
#
# Image_D02_image_strict_FP <- Image_D02 %>%
#   filter(Image_strict == "FP")
# write_xlsx(Image_D02_image_strict_FP,"./Check/2025.05.14_Calculus_Phase_1_Data_05.13/check_image_strict_FP.xlsx")
# <!-- ---------------------------------------------------------------------- -->
# <!--                  3c.    Load Surfaces Dataset                          -->
# <!-- ---------------------------------------------------------------------- -->
# <!-- ---------------------------- -->
# <!-- -------Pre Run First-------- -->
# <!-- ---------------------------- -->
process_surface_data("BW")
process_surface_data("IOPA")
# <!-- ---------------------------- -->
# <!-- ---------------------------- -->
# <!-- ---------------------------- -->
Master_D03_Surfae_BW <- read_xlsx(paste0(pfad,"/Surface_Reshape_IOU_",
IOU,"_BW.xlsx")) %>%
left_join(Master_D02) %>%
mutate(USUBJID=str_pad(row_number(), width = 5, pad = "0", side = "left") %>%
sprintf("Surface_BW_%s", .),
Lesion = factor(if_else(GT==1,"Positive Lesion","Negavite Lesion"),
levels=c("Positive Lesion","Negavite Lesion")))
# table(Cavity_GT$Image_Name,Cavity_GT$Category)
Master_D03_Surfae_IOPA <- read_xlsx(paste0(pfad,"/Surface_Reshape_IOU_",
IOU,"_IOPA.xlsx")) %>%
left_join(Master_D02) %>%
mutate(USUBJID=str_pad(row_number(), width = 5, pad = "0", side = "left") %>%
sprintf("Surface_IOPA_%s", .),
Lesion = factor(if_else(GT==1,"Positive Lesion","Negavite Lesion"),
levels=c("Positive Lesion","Negavite Lesion")))
Master_D03_Surfae <- rbind(Master_D03_Surfae_BW,Master_D03_Surfae_IOPA)
# <!-- ---------------------------------------------------------------------- -->
# <!--                  3d.    Load IOU Dataset                               -->
# <!-- ---------------------------------------------------------------------- -->
# IOU_D01 <- bind_rows(
#   read_xlsx("./Data/IOU/Open_Margin_Model_02_IOU_05.xlsx"),
#   read_xlsx("./Data/IOU/Open_Margin_Model_Part2_02_IOU_05_2025.06.30.xlsx")
# ) %>%
#   group_by(Image_Name) %>%  # Grouping by Image_Name if it makes sense
#   mutate(GroundTruth = zoo::na.locf(GroundTruth, na.rm = FALSE)) %>%
#   ungroup() %>%
#   mutate(Image_Name = toupper(Image_Name),
#     Image_Name = sub(".TXT", "", Image_Name),
#     Image_Name = sub("_BMP", ".BMP", Image_Name),
#     Image_Name = sub("_PNG", ".PNG", Image_Name),
#     Image_Name = sub("_JPEG", ".JPEG", Image_Name),
#     Image_Name = sub("_JPG", ".JPG", Image_Name))
#
# IOU_D02_Matched <- IOU_D01  %>%
#   filter(`IOU Score` >0) %>%
#   left_join(Master_D02) %>%
#   mutate(USUBJID=str_pad(row_number(), width = 5, pad = "0", side = "left") %>%
#            sprintf("Matched_%s", .))
#
# IOU_D03_Matched <- IOU_D02_Matched  %>%
#   filter(`IOU Match`==1)
## pfad, model_name, gt_name, image_type
process_surface_data("BW")
## Plot Surface Level ROC AUC
# surface_reshape_model <- read_excel(file.path("./01_Datasets/Output Data/2024.12.24", "Surface_Reshape_BW.xlsx"))
# roc_obj <- roc(surface_reshape_model$GT, surface_reshape_model$AI)
# plot(roc_obj)
# Assuming that you have a binary factor for predictions and actual values
# library(caret)
# confusion_matrix <- confusionMatrix(as.factor(surface_reshape_model$AI),
#                                     as.factor(surface_reshape_model$GT))
# print(confusion_matrix)
identical(read_csv(file.path(pfad,Found_RCT_V1.csv)),
read_csv(file.path(pfad,Found_RCT_V2.csv)))
identical(read_csv(file.path(pfad,"Found_RCT_V1.csv")),
read_csv(file.path(pfad,"Found_RCT_V2.csv")))
check1 <- read_csv(file.path(pfad,"Found_RCT_V1.csv"))
check2 <- read_csv(file.path(pfad,"Found_RCT_V2.csv"))
check3 <- full_join(check1,check2)
View(check1)
View(check2)
View(check1)
check1 <- read_csv(file.path(pfad,"Found_RCT_V1.csv"))%>%
filter(Image_Name != "") %>%
check2 <- read_csv(file.path(pfad,"Found_RCT_V2.csv"))%>%
filter(Image_Name != "") %>%
check3 <- full_join(check1,check2)
check1 <- read_csv(file.path(pfad,"Found_RCT_V1.csv"))%>%
filter(Image_Name != "")
check2 <- read_csv(file.path(pfad,"Found_RCT_V2.csv"))%>%
filter(Image_Name != "")
check3 <- full_join(check1,check2)
check3 <- anti_join(check1,check2)
View(check3)
check3a <- anti_join(check1,check2)
check3b <- semi_join(check1,check2)
check3a <- anti_join(check1,check2)
check3b <- anti_join(check2,check1)
View(check3a)
View(check3b)
IOU_D01 <- read_csv("./Data/IOU/Combined_GT_Found_RCT_Crown_Restoration_IOU.csv")%>%
group_by(Image_Name)
View(IOU_D01)
IOU_D01 <- read_csv("./Data/IOU/Combined_GT_Found_RCT_Crown_Restoration_IOU.csv")%>%
filter(GT==1, AI ==1)
View(IOU_D01)
check1 <- read_csv(file.path(pfad,"Found_RCT_V1.csv"))
check2 <- read_csv(file.path(pfad,"Found_RCT_V2.csv"))
sum(check1$AI)
IOU_D01 <- read_csv("./Data/IOU/Combined_GT_Found_RCT_Crown_Restoration_IOU.csv")%>%
filter(GT==1, AI ==1) %>%
mutate(Image_Name = toupper(Image_Name),
Image_Name = sub(".TXT", "", Image_Name),
Image_Name = sub("_BMP", ".BMP", Image_Name),
Image_Name = sub("_PNG", ".PNG", Image_Name),
Image_Name = sub("_JPEG", ".JPEG", Image_Name),
Image_Name = sub("_JPG", ".JPG", Image_Name))
names(IOU_D01)
IOU_D01 <- read_csv("./Data/IOU/Combined_GT_Found_RCT_Crown_Restoration_IOU.csv")%>%
filter(GT==1, AI ==1) %>%
mutate(Image_Name = toupper(Image_Name),
Image_Name = sub(".TXT", "", Image_Name),
Image_Name = sub("_BMP", ".BMP", Image_Name),
Image_Name = sub("_PNG", ".PNG", Image_Name),
Image_Name = sub("_JPEG", ".JPEG", Image_Name),
Image_Name = sub("_JPG", ".JPG", Image_Name)) %>%
rename(`IOU Score`=IOU)
IOU_D02_Matched <- IOU_D01  %>%
filter(`IOU Score` >0) %>%
left_join(Master_D02) %>%
mutate(USUBJID=str_pad(row_number(), width = 5, pad = "0", side = "left") %>%
sprintf("Matched_%s", .))
IOU_D03_Matched <- IOU_D02_Matched  %>%
filter(`IOU Match`==1)
IOU_D01 <- read_csv("./Data/IOU/Combined_GT_Found_RCT_Crown_Restoration_IOU.csv")%>%
filter(GT==1, AI ==1) %>%
mutate(Image_Name = toupper(Image_Name),
Image_Name = sub(".TXT", "", Image_Name),
Image_Name = sub("_BMP", ".BMP", Image_Name),
Image_Name = sub("_PNG", ".PNG", Image_Name),
Image_Name = sub("_JPEG", ".JPEG", Image_Name),
Image_Name = sub("_JPG", ".JPG", Image_Name)) %>%
rename(`IOU Score`=IOU,
`IOU Match`=1)
IOU_D02_Matched <- IOU_D01  %>%
filter(`IOU Score` >0) %>%
left_join(Master_D02) %>%
mutate(USUBJID=str_pad(row_number(), width = 5, pad = "0", side = "left") %>%
sprintf("Matched_%s", .))
IOU_D01 <- read_csv("./Data/IOU/Combined_GT_Found_RCT_Crown_Restoration_IOU.csv")%>%
filter(GT==1, AI ==1) %>%
mutate(Image_Name = toupper(Image_Name),
Image_Name = sub(".TXT", "", Image_Name),
Image_Name = sub("_BMP", ".BMP", Image_Name),
Image_Name = sub("_PNG", ".PNG", Image_Name),
Image_Name = sub("_JPEG", ".JPEG", Image_Name),
Image_Name = sub("_JPG", ".JPG", Image_Name)) %>%
rename(`IOU Score`=IOU,
`IOU Match`==1)
IOU_D02_Matched <- IOU_D01  %>%
filter(`IOU Score` >0) %>%
left_join(Master_D02) %>%
mutate(USUBJID=str_pad(row_number(), width = 5, pad = "0", side = "left") %>%
sprintf("Matched_%s", .))
IOU_D01 <- read_csv("./Data/IOU/Combined_GT_Found_RCT_Crown_Restoration_IOU.csv")%>%
filter(GT==1, AI ==1) %>%
mutate(Image_Name = toupper(Image_Name),
Image_Name = sub(".TXT", "", Image_Name),
Image_Name = sub("_BMP", ".BMP", Image_Name),
Image_Name = sub("_PNG", ".PNG", Image_Name),
Image_Name = sub("_JPEG", ".JPEG", Image_Name),
Image_Name = sub("_JPG", ".JPG", Image_Name)) %>%
rename(`IOU Score`=IOU,
`IOU Match`==1)
IOU_D01 <- read_csv("./Data/IOU/Combined_GT_Found_RCT_Crown_Restoration_IOU.csv")%>%
filter(GT==1, AI ==1) %>%
mutate(Image_Name = toupper(Image_Name),
Image_Name = sub(".TXT", "", Image_Name),
Image_Name = sub("_BMP", ".BMP", Image_Name),
Image_Name = sub("_PNG", ".PNG", Image_Name),
Image_Name = sub("_JPEG", ".JPEG", Image_Name),
Image_Name = sub("_JPG", ".JPG", Image_Name),
`IOU Match`==1) %>%
rename(`IOU Score`=IOU)
IOU_D01 <- read_csv("./Data/IOU/Combined_GT_Found_RCT_Crown_Restoration_IOU.csv")%>%
filter(GT==1, AI ==1) %>%
mutate(Image_Name = toupper(Image_Name),
Image_Name = sub(".TXT", "", Image_Name),
Image_Name = sub("_BMP", ".BMP", Image_Name),
Image_Name = sub("_PNG", ".PNG", Image_Name),
Image_Name = sub("_JPEG", ".JPEG", Image_Name),
Image_Name = sub("_JPG", ".JPG", Image_Name),
`IOU Match`=1) %>%
rename(`IOU Score`=IOU)
IOU_D02_Matched <- IOU_D01  %>%
filter(`IOU Score` >0) %>%
left_join(Master_D02) %>%
mutate(USUBJID=str_pad(row_number(), width = 5, pad = "0", side = "left") %>%
sprintf("Matched_%s", .))
IOU_D03_Matched <- IOU_D02_Matched  %>%
filter(`IOU Match`==1)
runApp('~/Documents/GitHub/Professional-Qualification/University Johns Hopkins-Data Visualization & Dashboarding with R Specialization/04. Publishing Visualizations in R with Shiny and flexdashboard/01. Simple Shiny App.R')
library(rsconnect)
rsconnect::setAccountInfo(name='5xyevt-zehuibai',
token='59359F45DF15FAC6550BBF8B577D6953',
secret='<SECRET>')
rsconnect::setAccountInfo(name='5xyevt-zehuibai',
token='59359F45DF15FAC6550BBF8B577D6953',
secret='<SECRET>')
rsconnect::setAccountInfo(name='5xyevt-zehuibai',
token='59359F45DF15FAC6550BBF8B577D6953',
secret='en4rCZfJdAAyoofTzYzwV21Qr7vg2qVl1KEu/bjk')
token='59359F45DF15FAC6550BBF8B577D6953',
rsconnect::setAccountInfo(name='5xyevt-zehuibai',
token='59359F45DF15FAC6550BBF8B577D6953',
secret='en4rCZfJdAAyoofTzYzwV21Qr7vg2qVl1KEu/bjk')
token='59359F45DF15FAC6550BBF8B577D6953',
rsconnect::setAccountInfo(
name = '5xyevt-zehuibai',
token = '59359F45DF15FAC6550BBF8B577D6953',
secret = 'en4rCZfJdAAyoofTzYzwV21Qr7vg2qVl1KEu/bjk'
)
runApp('~/Documents/GitHub/Professional-Qualification/University Johns Hopkins-Data Visualization & Dashboarding with R Specialization/04. Publishing Visualizations in R with Shiny and flexdashboard/01. Simple Shiny App.R')
runApp('~/Documents/GitHub/Professional-Qualification/University Johns Hopkins-Data Visualization & Dashboarding with R Specialization/04. Publishing Visualizations in R with Shiny and flexdashboard')
