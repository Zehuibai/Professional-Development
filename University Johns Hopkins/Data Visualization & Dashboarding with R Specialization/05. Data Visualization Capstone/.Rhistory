set.seed(27)
in_demo <- sample.int(nrow(cat_adoption), 50)
demo_cats <- cat_adoption |> slice(in_demo)
set.seed(123)
cat_split <- initial_split(cat_adoption |> slice(-in_demo), prop = 0.8)
cat_train <- training(cat_split)
cat_test <- testing(cat_split)
fit <- survfit(Surv(event_time, status) ~ 1, data = cat_train)
set.seed(123)
cat_split <- initial_split(cat_adoption, prop = 0.8)
cat_train <- training(cat_split)
cat_test <- testing(cat_split)
nrow(cat_train)
nrow(cat_test)
set.seed(27)
in_demo <- sample.int(nrow(cat_adoption), 50)
demo_cats <- cat_adoption |> slice(in_demo)
set.seed(123)
cat_split <- initial_split(cat_adoption |> slice(-in_demo), prop = 0.8)
cat_train <- training(cat_split)
cat_test <- testing(cat_split)
str(cat_adoption)
cat_adoption <- cat_adoption |>
mutate(event_time = Surv(time, event), .keep = "unused", .before = everything())
set.seed(123)
cat_split <- initial_split(cat_adoption, prop = 0.8)
cat_train <- training(cat_split)
cat_test <- testing(cat_split)
nrow(cat_train)
nrow(cat_test)
set.seed(27)
in_demo <- sample.int(nrow(cat_adoption), 50)
demo_cats <- cat_adoption |> slice(in_demo)
set.seed(123)
cat_split <- initial_split(cat_adoption |> slice(-in_demo), prop = 0.8)
cat_train <- training(cat_split)
cat_test <- testing(cat_split)
library(ggsurvfit)
survfit(event_time ~ 1, data = cat_adoption) |> ggsurvfit()
survfit(event_time ~ neutered, data = cat_train) |> ggsurvfit()
survfit(event_time ~ brown_tabby, data = cat_train) |> ggsurvfit()
library(leaflet)
proportional_hazards()
#> Proportional Hazards Model Specification (censored regression)
#>
#> Computational engine: survival
proportional_hazards() |>
set_engine("glmnet")
#> Proportional Hazards Model Specification (censored regression)
#>
#> Computational engine: glmnet
decision_tree() |>
set_mode("censored regression")
#> Decision Tree Model Specification (censored regression)
#>
#> Computational engine: rpart
tree_spec <-
decision_tree() |>
set_mode("censored regression")
tree_spec |>
fit(event_time ~ ., data = cat_train)
workflow() |>
add_formula(event_time ~ .) |>
add_model(tree_spec) |>
fit(data = cat_train)
tree_fit <-
workflow(event_time ~ ., tree_spec) |>
fit(data = cat_train)
## Fit a model workflow
tree_fit <-
workflow(event_time ~ ., tree_spec) |>
fit(data = cat_train)
tree_fit
## Predict with your model
predict(tree_fit, new_data = demo_cats)
## Predict with your model
predict(tree_fit, new_data = demo_cats, type = "time")
preds <- predict(tree_fit, new_data = demo_cats, type = "survival",
eval_time = seq(0, 365, by = 5))
preds
preds$.pred[[1]]
augment(tree_fit, new_data = demo_cats,
eval_time = seq(0, 365, by = 5))
demo_cat_preds <- augment(tree_fit, demo_cats, eval_time = ((1:10) * 30))
demo_cat_preds |> select(1:3)
demo_cat_preds |> select(1:3)
demo_cat_preds |>
concordance_survival(event_time, estimate = .pred_time)
quarto --version
library(quarto)
install.packages("quarto")
library(quarto)
quarto --version
install.packages("ggwordcloud")
install.packages("teal.modules.general")
install.packages("teal")
shiny::runApp('Documents/GitHub/Professional-Qualification/University Johns Hopkins-Data Visualization & Dashboarding with R Specialization/04. Publishing Visualizations in R with Shiny and flexdashboard/02. Complex Shiny App')
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(flexdashboard)
library(shiny)
library(tidyverse)
library(packcircles)
library(countrycode)
library(ggiraph)
library(plotly)
library(lubridate)
library(eeptools)
library(maps)
library(mapproj)
library(DT)
dat <- read_csv("Olympics_2016_Rio_Athletes.csv")
dat <- dat %>%
mutate(country = case_when(
nationality == 'IOA' ~ 'Independent Olympians',
nationality == 'ISV' ~ 'United States Virgin Islands',
nationality == 'LIB' ~ 'Lebanon',
nationality == 'ROT' ~ 'Refugee Olympic Team',
nationality == 'SIN' ~ 'Singapore',
nationality >0 ~ countrycode(nationality, "ioc", "country.name"))) %>%
mutate(continent = case_when(
nationality == 'IOA' ~ 'Independent',
nationality == 'ISV' ~ 'Americas',
nationality == 'LIB' ~ 'Asia',
nationality == 'ROT' ~ 'Independent',
nationality == 'SIN' ~ 'Asia',
nationality == 'KOS' ~ 'Europe',
nationality >0 ~ countrycode(nationality, "ioc", "continent"))) %>%
mutate(continent_id = case_when(
continent == 'Americas' ~ 1,
continent == 'Europe' ~ 2,
continent == 'Asia' ~ 3,
continent == 'Africa' ~ 4,
continent == 'Oceania' ~ 5,
continent ==  'Independent' ~ 6)) %>%
mutate(total = gold + silver + bronze) %>%
mutate(dob = mdy(dob))
dat <- dat %>%
mutate(country = case_when(
nationality == 'IOA' ~ 'Independent Olympians',
nationality == 'ISV' ~ 'United States Virgin Islands',
nationality == 'LIB' ~ 'Lebanon',
nationality == 'ROT' ~ 'Refugee Olympic Team',
nationality == 'SIN' ~ 'Singapore',
nationality >0 ~ countrycode(nationality, "ioc", "country.name"))) %>%
mutate(continent = case_when(
nationality == 'IOA' ~ 'Independent',
nationality == 'ISV' ~ 'Americas',
nationality == 'LIB' ~ 'Asia',
nationality == 'ROT' ~ 'Independent',
nationality == 'SIN' ~ 'Asia',
nationality == 'KOS' ~ 'Europe',
nationality >0 ~ countrycode(nationality, "ioc", "continent"))) %>%
mutate(continent_id = case_when(
continent == 'Americas' ~ 1,
continent == 'Europe' ~ 2,
continent == 'Asia' ~ 3,
continent == 'Africa' ~ 4,
continent == 'Oceania' ~ 5,
continent ==  'Independent' ~ 6)) %>%
mutate(total = gold + silver + bronze) %>%
mutate(dob = mdy(dob))
names(dat)
dat <- dat %>%
mutate(country = case_when(
nationality == 'IOA' ~ 'Independent Olympians',
nationality == 'ISV' ~ 'United States Virgin Islands',
nationality == 'LIB' ~ 'Lebanon',
nationality == 'ROT' ~ 'Refugee Olympic Team',
nationality == 'SIN' ~ 'Singapore',
nationality >0 ~ countrycode(nationality, "ioc", "country.name"))) %>%
mutate(continent = case_when(
nationality == 'IOA' ~ 'Independent',
nationality == 'ISV' ~ 'Americas',
nationality == 'LIB' ~ 'Asia',
nationality == 'ROT' ~ 'Independent',
nationality == 'SIN' ~ 'Asia',
nationality == 'KOS' ~ 'Europe',
nationality >0 ~ countrycode(nationality, "ioc", "continent"))) %>%
mutate(continent_id = case_when(
continent == 'Americas' ~ 1,
continent == 'Europe' ~ 2,
continent == 'Asia' ~ 3,
continent == 'Africa' ~ 4,
continent == 'Oceania' ~ 5,
continent ==  'Independent' ~ 6)) %>%
mutate(total = gold + silver + bronze) %>%
mutate(dob = mdy(date_of_birth))
cent <- function(x, year=1940){
m <- year(x) %% 100
year(x) <- ifelse(m > year %% 100, 1900+m, 2000+m)
x
}
dob2 = as.tibble(cent(dat$dob))
dat <- add_column(dat,as.vector(dob2)) %>%
rename("dob2"="value") %>%
mutate(age = floor(interval(start= dob2, end=mdy("08-05-2016"))/
duration(n=1, unit="years")))
cent <- function(x, year=1940){
m <- year(x) %% 100
year(x) <- ifelse(m > year %% 100, 1900+m, 2000+m)
x
}
dob2 = as.tibble(cent(dat$dob))
View(dob2)
View(dat)
str(dat)
dat <- dat %>%
mutate(country = case_when(
nationality == 'IOA' ~ 'Independent Olympians',
nationality == 'ISV' ~ 'United States Virgin Islands',
nationality == 'LIB' ~ 'Lebanon',
nationality == 'ROT' ~ 'Refugee Olympic Team',
nationality == 'SIN' ~ 'Singapore',
nationality >0 ~ countrycode(nationality, "ioc", "country.name"))) %>%
mutate(continent = case_when(
nationality == 'IOA' ~ 'Independent',
nationality == 'ISV' ~ 'Americas',
nationality == 'LIB' ~ 'Asia',
nationality == 'ROT' ~ 'Independent',
nationality == 'SIN' ~ 'Asia',
nationality == 'KOS' ~ 'Europe',
nationality >0 ~ countrycode(nationality, "ioc", "continent"))) %>%
mutate(continent_id = case_when(
continent == 'Americas' ~ 1,
continent == 'Europe' ~ 2,
continent == 'Asia' ~ 3,
continent == 'Africa' ~ 4,
continent == 'Oceania' ~ 5,
continent ==  'Independent' ~ 6)) %>%
mutate(total = gold + silver + bronze) %>%
mutate(dob = date_of_birth)
str(dat)
dat <- add_column(dat,as.vector(dob2)) %>%
rename("dob2"="value") %>%
mutate(age = floor(interval(start= dob2, end=mdy("08-05-2016"))/
duration(n=1, unit="years")))
dat <- dat %>%
mutate(country = case_when(
nationality == 'IOA' ~ 'Independent Olympians',
nationality == 'ISV' ~ 'United States Virgin Islands',
nationality == 'LIB' ~ 'Lebanon',
nationality == 'ROT' ~ 'Refugee Olympic Team',
nationality == 'SIN' ~ 'Singapore',
TRUE ~ countrycode(nationality, "ioc", "country.name")
)) %>%
mutate(continent = case_when(
nationality == 'IOA' ~ 'Independent',
nationality == 'ISV' ~ 'Americas',
nationality == 'LIB' ~ 'Asia',
nationality == 'ROT' ~ 'Independent',
nationality == 'SIN' ~ 'Asia',
nationality == 'KOS' ~ 'Europe',
TRUE ~ countrycode(nationality, "ioc", "continent")
)) %>%
mutate(continent_id = case_when(
continent == 'Americas' ~ 1,
continent == 'Europe' ~ 2,
continent == 'Asia' ~ 3,
continent == 'Africa' ~ 4,
continent == 'Oceania' ~ 5,
continent ==  'Independent' ~ 6)) %>%
mutate(total = gold + silver + bronze) %>%
mutate(dob = date_of_birth)
cent <- function(x, year = 1940) {
m <- year(x) %% 100
y <- ifelse(m > year %% 100, 1900 + m, 2000 + m)
update(x, year = y)
}
dob2 = as.tibble(cent(dat$dob))
dat <- add_column(dat,as.vector(dob2)) %>%
rename("dob2"="value") %>%
mutate(age = floor(interval(start= dob2, end=mdy("08-05-2016"))/
duration(n=1, unit="years")))
dat <- dat %>%
mutate(
dob2 = cent(dob),
age = floor(interval(start = dob2, end = mdy("08-05-2016")) /
duration(n = 1, unit = "years"))
)
fig_dat1 <- dat %>% select(nationality,country,continent,continent_id)
temp_dat1 <- dat %>% select(country)
temp_dat1 <- as_tibble(table(temp_dat1)) %>%
rename("country"="temp_dat1") %>%
rename("number_of_athletes"="n")
fig_dat1 <- dat %>% select(nationality,country,continent,continent_id)
temp_dat1 <- dat %>% select(country)
temp_dat1 <- as_tibble(table(temp_dat1)) %>%
rename("country"="temp_dat1") %>%
rename("number_of_athletes"="n")
head(dat)
head(dat)
library(tidyverse)
library(ggforce)       # for circle packing
library(ggiraph)       # for interactivity
library(packcircles)   # for circle layout
# Base data (assume head(dat) already loaded)
fig_dat1 <- dat %>% select(nationality, country, continent, continent_id)
# Count athletes per country
temp_dat1 <- dat %>% count(country, name = "number_of_athletes")
# Keep one row per country for join
fig_dat1 <- fig_dat1 %>% distinct(country, .keep_all = TRUE)
# Join athlete count with country-level info
fig_dat1 <- left_join(temp_dat1, fig_dat1, by = "country") %>%
arrange(desc(number_of_athletes))
# Circle packing layout
packing <- circleProgressiveLayout(fig_dat1$number_of_athletes, sizetype = 'area')
fig_dat1 <- bind_cols(fig_dat1, packing)
# Create vertices for drawing circles
dat.gg <- circleLayoutVertices(packing, npoints = 100)
# Add back extra columns for plotting
dat.gg$continent_id <- rep(fig_dat1$continent_id, each = 101)
dat.gg$number_of_athletes <- rep(fig_dat1$number_of_athletes, each = 101)
dat.gg$country <- rep(fig_dat1$country, each = 101)
dat.gg$nationality <- rep(fig_dat1$nationality, each = 101)
# Define fill colors by continent
region_colors <- alpha(c(
rgb(214,39,40, max = 255),     # Americas
rgb(44,160,44, max = 255),     # Europe
rgb(31,119,180, max = 255),    # Asia
rgb(140,86,75, max = 255),     # Africa
rgb(227,119,194, max = 255),   # Oceania
rgb(255,127,14, max = 255)),   # Independent
0.75)
# Plot
gg1 <- ggplot(data = dat.gg) +
ggiraph::geom_polygon_interactive(
aes(x = x, y = y, group = id,
fill = as.factor(continent_id),
tooltip = paste0(country, "\nAthletes: ", number_of_athletes),
data_id = x)) +
scale_fill_manual(
labels = c("Americas", "Europe", "Asia", "Africa", "Oceania", "Independent"),
values = region_colors) +
geom_text(data = filter(fig_dat1, number_of_athletes > 1),  # adjust for small dataset
aes(x = x, y = y, label = nationality, size = number_of_athletes),
color = "white") +
scale_size(range = c(5, 9)) +
guides(size = FALSE, fill = guide_legend(title = "Region")) +
labs(title = "Number of Athletes by Nationality & Region") +
theme_void(base_size = 14) +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 24)) +
coord_equal()
# Render as interactive girafe
girafe(ggobj = gg1, width_svg = 14, height_svg = 8)
my_world_map <- map_data("world") %>%
rename("country"="region")
my_world_map <- my_world_map %>%
mutate(nationality = countrycode(country, "country.name", "ioc"))
fig_dat2 <- dat %>% select(nationality,country)
temp_dat2 <- dat %>% select(country)
temp_dat2 <- as_tibble(table(temp_dat2)) %>%
rename("country"="temp_dat2") %>%
rename("Athletes"="n")
# Load and prepare world map data
my_world_map <- map_data("world") %>%
rename("country" = "region")  # Rename for consistency
# Add IOC (International Olympic Committee) 3-letter codes to map data
my_world_map <- my_world_map %>%
mutate(nationality = countrycode(country, "country.name", "ioc"))
# Extract relevant country-nationality pairs from your main dataset
fig_dat2 <- dat %>% select(nationality, country) %>% distinct()
# Count the number of athletes per country
temp_dat2 <- dat %>%
count(country, name = "Athletes")  # more concise than table + rename
# Merge athlete counts with nationality-country mapping
fig_dat2 <- inner_join(temp_dat2, fig_dat2, by = "country") %>%
arrange(desc(Athletes))  # Sort by athlete count
# Merge with map data using IOC nationality code
my_dat2_combined <- left_join(my_world_map, fig_dat2, by = "nationality")
# Create choropleth map
gg2 <- ggplot() +
geom_polygon(
data = my_dat2_combined,
mapping = aes(
x = long, y = lat, group = group,
text = paste(country.x),  # Tooltip text
fill = Athletes,
colour = "gray10"  # Static border color
)
) +
scale_fill_distiller(palette = 7, direction = 1) +
scale_colour_manual(values = c("gray10")) +
theme_bw() +
guides(color = FALSE) +  # Hide color (border) legend
coord_map(xlim = c(-180, 180)) +
labs(
title = "Global distribution of athletes",
x = "", y = ""
) +
theme(
legend.position = "right",
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size = 16, face = "bold")
)
# Make the map interactive with tooltips
ggplotly(gg2, tooltip = c("text", "fill")) %>%
hide_legend()
library(dplyr)
library(ggplot2)
# Summarize total medals by sport and sex
medals_by_sport_sex <- dat %>%
mutate(total_medals = gold + silver + bronze) %>%
group_by(sport, sex) %>%
summarise(medals = sum(total_medals, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(medals))
# Stacked bar chart
ggplot(medals_by_sport_sex, aes(x = reorder(sport, -medals), y = medals, fill = sex)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip to make sport names more readable
labs(
title = "Number of Medals per Sport, by Gender",
x = "Sport",
y = "Number of Medals",
fill = "Gender"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.text.y = element_text(size = 11)
)
library(knitr)
renderImage(
list(src = "Rio_2016_Olympics.png",contentType = 'image/png',
width = 100,
height = 100,
deleteFile=FALSE)
)
#pie chart of gender, filter by country
fig_dat3 <- dat %>%
#filter(nationality == USA) %>%
select(sex)
fig_dat3 <- as_tibble(table(fig_dat3)) %>%
rename("count"="n") %>%
rename("sex"="fig_dat3") %>%
mutate(per=count/sum(count)) %>%
arrange(count)
library(dplyr)
library(plotly)
# Filter and prepare gender count data
fig_dat3 <- dat %>%
# Uncomment and set the country you want to filter by, e.g., "USA"
# filter(nationality == "USA") %>%
count(sex, name = "count") %>%
mutate(per = count / sum(count)) %>%
arrange(count)
# Create the pie chart
plot_ly(fig_dat3,
labels = ~sex,
values = ~per,
type = 'pie',
textinfo = 'label+percent',
insidetextfont = list(size = 20),
hoverinfo = 'text',
text = ~paste(sex, "athletes:", count),
marker = list(
colors = c("rgba(214,39,40,0.75)", "rgba(31,119,180,0.75)"),
line = list(color = '#000000', width = 2)
)) %>%
layout(
title = "<b>Percentage of Athletes by Gender</b>",
font = list(size = 14),
legend = list(title = list(text = '<b>Sex</b>'))
)
sidebar_dat1 <- dat %>%
filter(total > 0)
selectInput(inputId="my_medal",label="medals",choices=c("total","gold","silver","bronze"),multiple=FALSE,selected="total")
selectInput(inputId="my_nationality",label="nationality",choices=sort(unique(sidebar_dat1$nationality)),multiple=TRUE,selected=unique(sidebar_dat1$nationality))
selectInput(inputId="my_sport",label="sport",choices=sort(unique(sidebar_dat1$sport)),multiple=TRUE,selected=unique(sidebar_dat1$sport))
library(knitr)
renderImage({
list(
src = "Rio_2016_Olympics.png",
contentType = 'image/png',
width = 100,
height = 100
)
}, deleteFile = FALSE)
warnings()
#####Make sure you load any required packages.
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Base data (assume head(dat) already loaded)
fig_dat1 <- dat %>% select(nationality, country, continent, continent_id)
# Count athletes per country
temp_dat1 <- dat %>% count(country, name = "number_of_athletes")
# Keep one row per country for join
fig_dat1 <- fig_dat1 %>% distinct(country, .keep_all = TRUE)
# Join athlete count with country-level info
fig_dat1 <- left_join(temp_dat1, fig_dat1, by = "country") %>%
arrange(desc(number_of_athletes))
fig_dat1
str(dat)
# Count athletes per country
athletes_per_country <- dat %>%
count(country, name = "number_of_athletes")
# Summarize total medals per country
medals_per_country <- dat %>%
group_by(country) %>%
summarise(total_medals = sum(total, na.rm = TRUE), .groups = "drop")
# Merge both datasets
fig_dat1 <- left_join(athletes_per_country, medals_per_country, by = "country") %>%
filter(!is.na(country)) %>%
arrange(desc(number_of_athletes))
fig_dat1
